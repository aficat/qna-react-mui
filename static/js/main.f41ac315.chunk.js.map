{"version":3,"sources":["components/Question/SubmitQuestion.js","components/Question/QuestionDisplay.js","components/Question.js","components/Contents/QuestionsList.js","components/Contents/AnswersList.js","components/Contents.js","components/MenuBar.js","App.js","serviceWorker.js","stores/questionStore.js","index.js"],"names":["SubmitQuestion","state","name","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","axios","post","question","then","res","react_default","a","createElement","align","index_es","container","spacing","justify","style","maxWidth","item","md","id","label","multiline","rows","type","this","onChange","margin","variant","fullWidth","paddingTop","color","onClick","Component","observer","QuestionDisplay","routeToHome","props","questionStore","updateCurrentPage","backgroundColor","avatar","action","title","titleTypographyProps","Question","keyResult","Question_SubmitQuestion","Question_QuestionDisplay","QuestionsList","questions","routeToQ","getQuestionsAPI","get","result","data","_this2","Typography_default","Grid_default","map","key","borderTop","size","answers","length","AnswersList","padding","Contents","Contents_QuestionsList","Contents_AnswersList","MenuBar","position","alignItems","disableGutters","paddingBottom","App","Fragment","components_MenuBar","className","components_Question","components_Contents","Boolean","window","location","hostname","match","QuestionStore","Object","classCallCheck","currentPage","decorate","observable","computed","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f41ac315.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { observer } from 'mobx-react';\r\n\r\nclass SubmitQuestion extends Component {\r\n    state = {\r\n        name: '',\r\n    }\r\n\r\n    // set state of new question typed in text field\r\n    handleChange = event => {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    // submit question by calling api to post question\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        axios.post(`https://5c2d8434b8051f0014cd478a.mockapi.io/question`, { question: this.state.name })\r\n            .then(res => {\r\n                // console.log(res);\r\n                // console.log(res.data);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div align=\"center\">\r\n                <Grid container spacing={24} justify=\"center\" style={{ maxWidth: 800 }}>\r\n                    <Grid item md={10}>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Post Your Question Here\"\r\n                            multiline\r\n                            rows=\"4\"\r\n                            type=\"text\"\r\n                            name={this.state.name}\r\n                            onChange={this.handleChange}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            align=\"left\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} style={{ paddingTop: 28 }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.handleSubmit}\r\n                            fullWidth\r\n                        >\r\n                            Submit\r\n                    </Button>\r\n                    </Grid>\r\n                    <br /><br />\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubmitQuestion = observer(SubmitQuestion);\r\nexport default SubmitQuestion;","import React, { Component } from 'react';\r\nimport { Button, Card, CardHeader, Grid, TextField } from '@material-ui/core';\r\nimport { observer } from 'mobx-react';\r\n\r\nclass QuestionDisplay extends Component {\r\n    state = {\r\n    }\r\n\r\n    routeToHome = () => {\r\n        const { questionStore } = this.props;\r\n        questionStore.updateCurrentPage('home');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div align=\"center\">\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={this.routeToHome}\r\n                >\r\n                    Back to Home\r\n                </Button>\r\n                <br /><br /><br />\r\n                <Card style={{ maxWidth: 800, backgroundColor: \"#BCE0FD\" }}>\r\n                    <CardHeader\r\n                        avatar={null}\r\n                        action={null}\r\n                        title={\"What is a question?\"}\r\n                        titleTypographyProps={{ variant: \"subtitle1\" }}\r\n                    />\r\n                </Card>\r\n                <br />\r\n                <Grid container spacing={24} justify=\"center\" style={{ maxWidth: 800 }}>\r\n                    <Grid item md={10}>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Post Your Answer Here\"\r\n                            multiline\r\n                            rows=\"4\"\r\n                            type=\"text\"\r\n                            name={this.state.name}\r\n                            onChange={this.handleChange}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            align=\"left\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} style={{ paddingTop: 28 }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.handleSubmit}\r\n                            fullWidth\r\n                        >\r\n                            Submit\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuestionDisplay = observer(QuestionDisplay);\r\nexport default QuestionDisplay;","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport SubmitQuestion from './Question/SubmitQuestion';\r\nimport QuestionDisplay from './Question/QuestionDisplay';\r\n\r\nclass Question extends Component {\r\n\r\n  render() {\r\n        const { questionStore } = this.props;\r\n        const { keyResult } = questionStore;\r\n        switch (keyResult) {\r\n            case 'home': //displays textfield to submit question\r\n                return <SubmitQuestion questionStore={questionStore}/>;\r\n            case 'question': // displays question selected\r\n                return <QuestionDisplay questionStore={questionStore}/>;\r\n            default:\r\n                return;\r\n        }\r\n  }\r\n}\r\n\r\nQuestion = observer(Question);\r\nexport default Question;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nimport { observer } from 'mobx-react';\r\nimport { Card, CardActions, CardHeader, Button } from '@material-ui/core';\r\n\r\nclass QuestionsList extends Component {\r\n  state = {\r\n    questions: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestionsAPI();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.getQuestionsAPI();\r\n  }\r\n\r\n  routeToHome = () => {\r\n    const { questionStore } = this.props;\r\n    questionStore.updateCurrentPage('home');\r\n  }\r\n\r\n  routeToQ = () => {\r\n    const { questionStore } = this.props;\r\n    questionStore.updateCurrentPage('question');\r\n  }\r\n\r\n  getQuestionsAPI = () => {\r\n    axios.get(`https://5c2d8434b8051f0014cd478a.mockapi.io/question`)\r\n      .then(result => {\r\n        // console.log(result.data)\r\n        this.setState({\r\n          questions: result.data,\r\n        });\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h6\" style={{ paddingTop: 18 }}>\r\n          List of Questions\r\n        </Typography>\r\n        <br />\r\n        <Grid container spacing={24} justify=\"center\" style={{ maxWidth: 1200 }}>\r\n          {this.state.questions.map(question =>\r\n            <Grid item md={3} key={question.id}>\r\n              <Card>\r\n                <CardHeader\r\n                  avatar={null}\r\n                  action={null}\r\n                  title={question.question}\r\n                  titleTypographyProps={{ variant: \"subtitle1\" }}\r\n                />\r\n                <CardActions style={{ borderTop: \"#E1E1E1 solid 1px\", align: \"center\" }}>\r\n                  <Button size=\"small\" onClick={this.routeToQ}>\r\n                    <Typography variant=\"caption\">View Answers ({question.answers.length})</Typography>\r\n                  </Button>\r\n                  <Button size=\"small\" onClick={null}>\r\n                    <Typography variant=\"caption\">Delete Question</Typography>\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nQuestionsList = observer(QuestionsList);\r\nexport default QuestionsList;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nimport { observer } from 'mobx-react';\r\nimport { Card, CardActionArea, CardHeader, Button } from '@material-ui/core';\r\n\r\nclass AnswersList extends Component {\r\n    state = {\r\n        questions: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestionsAPI();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.getQuestionsAPI();\r\n    }\r\n\r\n    getQuestionsAPI = () => {\r\n        axios.get(`https://5c2d8434b8051f0014cd478a.mockapi.io/question`)\r\n            .then(result => {\r\n                // console.log(result.data)\r\n                this.setState({\r\n                    questions: result.data,\r\n                });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container spacing={24} justify=\"center\" style={{ maxWidth: 800, paddingTop: 24 }}>\r\n                {this.state.questions.map(question =>\r\n                    <Grid item md={12} key={question.id}>\r\n                        <Card>\r\n                            <CardHeader\r\n                                avatar={null}\r\n                                action={null}\r\n                                title={question.question}\r\n                                titleTypographyProps={{ variant: \"subtitle1\" }}\r\n                            />\r\n                            <CardActionArea style={{ borderTop: \"#E1E1E1 solid 1px\", align: \"center\" }}>\r\n                                <Typography variant=\"caption\" style={{ padding: 6 }}>DELETE ANSWER</Typography>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nAnswersList = observer(AnswersList);\r\nexport default AnswersList;","import React, { Component } from 'react';\r\nimport QuestionsList from './Contents/QuestionsList';\r\nimport { observer } from 'mobx-react';\r\nimport AnswersList from './Contents/AnswersList';\r\n\r\nclass Contents extends Component {\r\n\r\n    render() {\r\n        const { questionStore } = this.props;\r\n        const { keyResult } = questionStore;\r\n        switch (keyResult) {\r\n            case 'home': //displays list of questions\r\n                return <QuestionsList questionStore={questionStore}/>;\r\n            case 'question': //displays list of answers for question selected\r\n                return <AnswersList questionStore={questionStore}/>;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nContents = observer(Contents);\r\nexport default Contents;","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\nclass MenuBar extends Component {\r\n    render() {\r\n        return (\r\n            <AppBar position=\"static\" color=\"default\" style={{ alignItems: \"center\" }} >\r\n                <Toolbar disableGutters={true}>\r\n                    <Typography variant=\"h5\" color=\"default\" style={{ paddingTop: 18, paddingBottom: 18 }}>\r\n                        Q&A APPLICATION\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\n\r\nMenuBar = observer(MenuBar);\r\nexport default MenuBar;","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport { observer } from 'mobx-react';\nimport Contents from './components/Contents';\nimport MenuBar from './components/MenuBar';\n\nclass App extends Component {\n\n  render() {\n    const { questionStore } = this.props;\n    return (\n      <React.Fragment>\n        <MenuBar questionStore={questionStore} />\n        <div className=\"App\" align=\"center\">\n          <div className=\"App-question\">\n            <br />\n            <Question questionStore={questionStore} />\n            <br /><br />\n          </div>\n          <div className=\"App-listing\" align=\"center\">\n            <Contents questionStore={questionStore} />\n            <br /><br />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nApp = observer(App);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action, decorate, computed } from \"mobx\";\r\n\r\nclass QuestionStore {\r\n\r\n    constructor() {\r\n        this.currentPage = {\r\n            key: 'home'\r\n        };\r\n    }\r\n\r\n    // @computed\r\n    get keyResult() {\r\n        return this.currentPage.key;\r\n    }\r\n\r\n    // @action \r\n    updateCurrentPage = (key) => {\r\n        this.currentPage.key = key;\r\n    }\r\n}\r\n\r\ndecorate(QuestionStore, {\r\n    currentPage: observable,\r\n    keyResult: computed,\r\n    updateCurrentPage: action,\r\n})\r\n\r\nexport default QuestionStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport QuestionStore from './stores/questionStore';\n\nconst questionStore = new QuestionStore();\nReactDOM.render(<App questionStore={questionStore} />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}