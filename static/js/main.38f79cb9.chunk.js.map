{"version":3,"sources":["components/Question.js","components/Listings.js","App.js","serviceWorker.js","index.js"],"names":["Question","state","name","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","user","axios","post","then","res","console","log","data","react_default","a","createElement","TextField_default","id","label","multiline","rows","type","onChange","this","defaultValue","margin","variant","className","onClick","Component","Listings","persons","_this2","get","result","Grid_default","item","xs","md","Typography_default","map","person","align","question","App","components_Question","components_Listings","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAoDeA,6MA/CXC,MAAQ,CACJC,KAAM,MAGRC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAAEJ,KAAME,EAAMG,OAAOC,WAGrCC,aAAe,SAAAL,GACbA,EAAMM,iBAEN,IAAMC,EAAO,CACXT,KAAMG,EAAKJ,MAAMC,MAGnBU,IAAMC,KAAN,qEAAiF,CAAEF,SAChFG,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIG,iFAOpB,OACIC,EAAAC,EAAAC,cAAA,WAEFF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACAG,GAAG,4BACHC,MAAM,qBACNC,WAAS,EACTC,KAAK,IACLC,KAAK,OACLzB,KAAK,WACL0B,SAAUC,KAAKD,SACfE,aAAa,0BACbC,OAAO,SACPC,QAAQ,aAENb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACXF,EAAAC,EAAAC,cAAA,KAAGY,UAAU,uDAAuDC,QAASL,KAAKpB,cAAlF,kBA1CiB0B,+CC4BRC,6MA1BbnC,MAAQ,CACNoC,QAAS,uFAGS,IAAAC,EAAAT,KAClBjB,IAAM2B,IAAN,sEACGzB,KAAK,SAAAC,GACJ,IAAMsB,EAAUtB,EAAIG,KAAKsB,OACzBF,EAAKhC,SAAS,CAAE+B,+CAKhB,OACIlB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAMsB,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAYY,QAAQ,MAApB,aAGVH,KAAK5B,MAAMoC,QAAQS,IAAI,SAAAC,GAAM,OAAI5B,EAAAC,EAAAC,cAAA,KAAG2B,MAAM,UAAUD,EAAOE,qBApBtCd,aCmBRe,mLAhBX,OACE/B,EAAAC,EAAAC,cAAA,OAAKY,UAAU,MAAMe,MAAM,UAC3B7B,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBACfd,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,YAGLF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cAAce,MAAM,UACjC7B,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,oBAZKc,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.38f79cb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\n\r\nclass Question extends Component {\r\n    state = {\r\n        name: '',\r\n      }\r\n    \r\n      handleChange = event => {\r\n        this.setState({ name: event.target.value });\r\n      }\r\n    \r\n      handleSubmit = event => {\r\n        event.preventDefault();\r\n    \r\n        const user = {\r\n          name: this.state.name\r\n        };\r\n\r\n        axios.post(`https://62167432-83e6-4153-a9ed-c53ed93b81f7.mock.pstmn.io/api/qns`, { user })\r\n          .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            \r\n          }) ;\r\n        \r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n          <TextField\r\n          id=\"outlined-multiline-static\"\r\n          label=\"Post Your Question\"\r\n          multiline\r\n          rows=\"4\"\r\n          type=\"text\"\r\n          name=\"question\"\r\n          onChange={this.onChange}\r\n          defaultValue=\"Type your question here\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n        />\r\n            <br/><br/>\r\n      <a className=\"btn aqua-gradient btn-rounded my-0 js-scroll-trigger\" onClick={this.handleSubmit}>Submit</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\n\r\nclass Listings extends Component {\r\n  state = {\r\n    persons: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(`https://62167432-83e6-4153-a9ed-c53ed93b81f7.mock.pstmn.io/api/qns`)\r\n      .then(res => {\r\n        const persons = res.data.result;\r\n        this.setState({ persons });\r\n      })\r\n  }\r\n    render() {\r\n      \r\n        return (\r\n            <div>\r\n          <Grid item xs={12} md={6}>\r\n            <Typography variant=\"h6\">\r\n              Questions \r\n            </Typography>\r\n{ this.state.persons.map(person => <p align=\"center\">{person.question}</p>)}\r\n          </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Listings;","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport Listings from './components/Listings';\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <div className=\"App\" align=\"center\">\n      <div className=\"App-question\">\n      <Question></Question>\n      <br/><br/>\n      </div>\n       \n      <div className=\"App-listing\" align=\"center\">\n        <Listings></Listings>\n        <br/><br/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}